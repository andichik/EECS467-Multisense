//
//  SensorController.swift
//  MayApp
//
//  Created by Russell Ladd on 2/5/17.
//  Copyright Â© 2017 University of Michigan. All rights reserved.
//

import Foundation
import MayAppCommon

final class LaserController {
    
    private final class ContinuousMeasurement {
        
        //let laserPath = "/dev/tty.usbmodemFA131" // Russell
        let laserPath = "/dev/cu.usbmodem1421" // Jasmine
        //let laserPath = "/dev/cu.usbmodem1441" // Colin
        //let laserPath = "/dev/cu.usbmodem14521" // Colin

        var urg = urg_t()
        
        let activity: NSObjectProtocol
        
        var timer: Timer!
        
        init(scanInterval: TimeInterval, block: @escaping (Data) -> Void) {
            
            // Register this activity with the system to ensure our app gets resource priority and is not put into App Nap
            activity = ProcessInfo.processInfo.beginActivity(options: [.idleDisplaySleepDisabled, .userInitiated, .latencyCritical], reason: "Streaming laser scans to remote.")
            
            guard urg_open(&urg, URG_SERIAL, laserPath, 115200) == 0 else {
                
                // Short circuit path in case laser is not connected
                
                /*let distances = (0..<Laser.sampleCount).map { index -> UInt16 in
                    
                    let angle = Laser.angleStart + Float(index) * Laser.angleIncrement
                    
                    let distance: Float //= 4.0 + cos(6.0 * angle)
                    
                    if angle < -.pi / 4.0 {
                        distance = -1.0 / sin(angle)
                    } else if angle < atan2(-2.0, 3.0) {
                        distance = -2.0 / sin(angle)
                    } else if angle < atan2(2.0, 3.0) {
                        distance = 3.0 / cos(angle)
                    } else if angle < .pi / 4.0 {
                        distance = 2.0 / sin(angle)
                    } else {
                        distance = 1.0 / sin(angle)
                    }
                    
                    return UInt16(distance * 2 * 1000)
                }*/
                
                let distancesRaw = [2580, 2588, 2612, 2613, 2618, 2629, 2632, 2655, 2672, 2676, 2688, 2711, 2723, 2723, 2723, 2579, 2499, 2473, 2456, 2446, 2427, 2416, 2416, 2413, 2413, 2400, 2391, 2387, 2381, 2381, 2384, 2381, 2382, 2382, 2382, 2382, 2389, 2400, 2408, 2408, 2410, 2419, 2436, 2445, 2458, 2467, 2487, 2526, 2722, 2751, 2751, 2751, 2751, 2744, 2729, 2712, 2708, 2707, 2702, 2700, 2690, 2686, 2681, 2675, 2674, 2666, 2656, 2654, 2647, 2639, 2634, 2633, 2625, 2623, 2615, 2610, 2610, 2595, 2594, 2591, 2584, 2581, 2581, 2575, 2560, 2550, 2503, 2157, 1608, 1547, 1539, 1537, 1537, 1537, 1539, 1551, 1568, 1582, 1602, 1622, 1636, 1656, 1680, 1721, 1740, 1750, 1779, 1799, 1837, 1863, 1890, 1910, 1941, 1983, 2003, 2046, 2070, 2106, 2139, 2188, 2219, 2253, 2314, 2346, 2440, 2958, 3046, 3106, 3185, 3250, 3320, 3418, 5786, 5786, 5776, 5775, 5772, 5757, 5757, 5757, 5745, 5737, 5733, 5733, 5739, 5741, 5739, 5746, 5744, 5744, 5739, 5739, 5740, 5746, 5740, 5737, 5736, 5729, 5717, 5717, 5727, 5727, 5722, 5722, 5720, 5720, 5704, 5696, 5634, 5114, 5085, 5085, 5089, 5233, 5233, 5596, 5596, 5707, 5723, 5750, 5797, 5804, 5797, 5795, 5748, 5705, 5705, 5728, 5728, 5728, 1, 5688, 5688, 5902, 5909, 6483, 6535, 6543, 7718, 7718, 7009, 7009, 6992, 6992, 6860, 2410, 2403, 2403, 2403, 2403, 2403, 2409, 2411, 2412, 2412, 2417, 2417, 2419, 2420, 2422, 2427, 2428, 2432, 2434, 2439, 2439, 2441, 2441, 2449, 2450, 2452, 2453, 2453, 2461, 2464, 2468, 2469, 2469, 2475, 2480, 2480, 2480, 2481, 2488, 2496, 2506, 2509, 2510, 2510, 2511, 2520, 2529, 2536, 2536, 2537, 2541, 2548, 2555, 2555, 2556, 2558, 2567, 2574, 2578, 2579, 2587, 2593, 2595, 2605, 2608, 2612, 2615, 2620, 2624, 2632, 2640, 2642, 2649, 2653, 2657, 2666, 2671, 2683, 2691, 2691, 2695, 2700, 2701, 2729, 2734, 2748, 2760, 2763, 2764, 2764, 2773, 2802, 2803, 2807, 2812, 2812, 2812, 2803, 2784, 2772, 2753, 2737, 2717, 2693, 2674, 2664, 2649, 2631, 2619, 2599, 2595, 2569, 2558, 2525, 2517, 2497, 2496, 2480, 2465, 2446, 2445, 2428, 2425, 2396, 2388, 2376, 2366, 2354, 2344, 2333, 2314, 2301, 2287, 2279, 2267, 2260, 2255, 2252, 2234, 2222, 2210, 2203, 2175, 2174, 2165, 2161, 2151, 2140, 2135, 2116, 2109, 2097, 2084, 2078, 2063, 2063, 2056, 2045, 2045, 2039, 2024, 2011, 2001, 1997, 1995, 1987, 1979, 1976, 1962, 1962, 1962, 1982, 1990, 2003, 2014, 2020, 2023, 2031, 2053, 2064, 2071, 2095, 2103, 2118, 2123, 2146, 2160, 2165, 2177, 2204, 2214, 2228, 2233, 2255, 2275, 2293, 2314, 2322, 2332, 2353, 2376, 2395, 2416, 2416, 2445, 2455, 2479, 2505, 2523, 2542, 2549, 2565, 2599, 2620, 2646, 2661, 2686, 2707, 2727, 2746, 2767, 2791, 2821, 2861, 2875, 2898, 2939, 2946, 2976, 3015, 3039, 3080, 3116, 3153, 3173, 3211, 3231, 3271, 3315, 3348, 3388, 3423, 3458, 3484, 3520, 3565, 3612, 3643, 3696, 3734, 3790, 3839, 3877, 3940, 4011, 4049, 4106, 4106, 4106, 2641, 2641, 2638, 2638, 2638, 2624, 2594, 2488, 2456, 2443, 2441, 2373, 2365, 2365, 2365, 2369, 2393, 8650, 8650, 8633, 8631, 8631, 8631, 8614, 8607, 8592, 8583, 8575, 8575, 8569, 8574, 8565, 8574, 8583, 8583, 1, 1, 1, 1, 1, 1, 1, 1, 14020, 14020, 14005, 14003, 14001, 13802, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14711, 14711, 14671, 14662, 14662, 14664, 14664, 14661, 14661, 14661, 14675, 14676, 14682, 14682, 14684, 14689, 14711, 14728, 14731, 14738, 14738, 14420, 14021, 14021, 14039, 14039, 2139, 2087, 2087, 2087, 2082, 2079, 2077, 2072, 2072, 2072, 2095, 2100, 2135, 2165, 2171, 2171, 2176, 2176, 2183, 2183, 2183, 2185, 2218, 2263, 8865, 8867, 8868, 8868, 5258, 5200, 5123, 5045, 4964, 4905, 4869, 4865, 4865, 4869, 4865, 4865, 4821, 4776, 4721, 4624, 4544, 4451, 3953, 3899, 3865, 3831, 3781, 3726, 3683, 3637, 3581, 3533, 3494, 3461, 3438, 3393, 3346, 3302, 3272, 3246, 3205, 3183, 3131, 3107, 3086, 3034, 3016, 2987, 2955, 2900, 2883, 2856, 2842, 2816, 2775, 2750, 2726, 2705, 2688, 2672, 2628, 2616, 2600, 2569, 2552, 2533, 2512, 2495, 2469, 2449, 2422, 2417, 2390, 2379, 2359, 2350, 2330, 2311, 2292, 2289, 2260, 2252, 2252, 2223, 2202, 2195, 2172, 2169, 2143, 2140, 2122, 2102, 2083, 2073, 2069, 2053, 2044, 2021, 2017, 1997, 1987, 1986, 1973, 1957, 1956, 1954, 1954, 1954, 1958, 1960, 1964, 1966, 1979, 1983, 1995, 2005, 2007, 2007, 2009, 2009, 2028, 2055, 2058, 2066, 2069, 2071, 2088, 2104, 2112, 2116, 2127, 2128, 2137, 2148, 2169, 2181, 2194, 2195, 2198, 2214, 2220, 2231, 2250, 2268, 2275, 2289, 2293, 2310, 2314, 2320, 2347, 2356, 2372, 2383, 2388, 2399, 2420, 2431, 2458, 2468, 2476, 2485, 2504, 2524, 2541, 2554, 2559, 2574, 2578, 2604, 2624, 2648, 2652, 2674, 2688, 2710, 2727, 2754, 2774, 2789, 2789, 2789, 2788, 2781, 2779, 2774, 2774, 2772, 2749, 2747, 2745, 2736, 2725, 2722, 2700, 2698, 2695, 2693, 2689, 2669, 2659, 2655, 2655, 2655, 2648, 2640, 2629, 2626, 2614, 2612, 2610, 2606, 2595, 2589, 2585, 2585, 2584, 2584, 2570, 2559, 2555, 2552, 2545, 2539, 2539, 2535, 2530, 2517, 2517, 2515, 2515, 2512, 2503, 2503, 2500, 2493, 2486, 2483, 2478, 2473, 2472, 2468, 2468, 2467, 2463, 2449, 2449, 2449, 2449, 2445, 2445, 2436, 2431, 2426, 2426, 2426, 2426, 2425, 2425, 2425, 2421, 2414, 2407, 2407, 2402, 2398, 2398, 2394, 2390, 2389, 2387, 2389, 2389, 2389, 2385, 2379, 2377, 2372, 2347, 2257, 2013, 1827, 1486, 1431, 1428, 1428, 1428, 1426, 1428, 1429, 1499, 1661, 1801, 2032, 2229, 4300, 4329, 4367, 4367, 4367, 4345, 4345, 4345, 4393, 4427, 4427, 4393, 4307, 4298, 4289, 4289, 4289, 4288, 4284, 4264, 4254, 3316, 3264, 3250, 3238, 3237, 3236, 3231, 3231, 3231, 3242, 3243, 4135, 4135, 4135, 4129, 4121, 4089, 3384, 3235, 3209, 3175, 3171, 3171, 3171, 3173, 3201, 3208, 3211, 3412, 4029, 5139, 5148, 5162, 5162, 5159, 5159, 5576, 5576, 5396, 4053, 4050, 4050, 4050, 4065, 4067, 4070, 5439, 5440, 5439, 5440, 5443, 5456, 5470, 5472, 5491, 5504, 5504, 1528, 1528, 1523, 1523, 1522, 1522, 1515, 1492, 1492, 1482, 1472, 1472, 1472, 1468, 1468, 1468, 1468, 1464, 1464, 1464, 1461, 1450, 1446, 1444, 1439, 1439, 1439, 1440, 1440, 1440, 1441, 1449, 1454, 1591, 1612, 1621, 1621, 1623, 1623, 1625, 1625, 1627, 1634, 1634, 1641, 1645, 1651, 1667, 1729, 1812, 2576, 2634, 2643, 2654, 2656, 2658, 2665, 2665, 2671, 2693, 2700, 2703, 2704, 2710, 2710, 2731, 2732, 2742, 2750, 2760, 2768, 2772, 2782, 2783, 2803, 2807, 2812, 2817, 2832, 2838, 2865, 2871, 2884, 2893, 2894, 2902, 2912, 2915, 2915, 2915, 2892, 2889, 2877, 2853, 2845, 2817, 2810, 2789, 2775, 2766, 2743, 2734, 2720, 2711, 2693, 2681, 2656, 2653, 2642, 2623, 2600, 2598, 2588, 2583, 2560, 2548, 2536, 2528, 2523, 2512, 2499, 2491, 2476, 2473, 2462, 2447, 2434, 2426, 2416]
                
                let distances = distancesRaw.map { UInt16($0) }
                
                let data = distances.withUnsafeBufferPointer({ buffer in
                    return Data(buffer: buffer)
                })
                
                timer = Timer.scheduledTimer(withTimeInterval: scanInterval, repeats: true) { timer in
                    block(data)
                }
                
                return
            }
            
            var distances = Array<Int>(repeating: 0, count: Int(urg_max_data_size(&urg)))
            
            timer = Timer.scheduledTimer(withTimeInterval: scanInterval, repeats: true) { [unowned self] timer in
                
                // Start measurement for 1 scan and retreive data
                
                // NOTE: We choose 1 scan instead of URG_SCAN_INFINITY because URG_SCAN_INFINITY requires really aggressive polling of the device
                // If this timer block were occasionally skipped, the laser would get farther and farther ahead of the computer, filling up an internal buffer in the laser
                // This would cause our data to fall farther and farther out of sync until the laser's internal buffer overflowed causing an error
                // This method avoids that problem by only asking for one scan at a time and then immediately pulling the data
                
                urg_start_measurement(&self.urg, URG_DISTANCE, 1, 0)
                let sampleCount = Int(urg_get_distance(&self.urg, &distances, nil))
                
                guard sampleCount > 0 else {
                    print("LASER ERROR: \(sampleCount)")
                    // TODO: close and reopen
                    return
                }
                
                let data = distances.prefix(upTo: sampleCount).map { UInt16($0) }.withUnsafeBufferPointer { buffer in
                    return Data(buffer: buffer)
                }
                
                block(data)
            }
        }
        
        deinit {
            
            timer.invalidate()
            
            urg_close(&urg)
            
            ProcessInfo.processInfo.endActivity(activity)
        }
    }
    
    private var continuousMeasurement: ContinuousMeasurement?
    
    // Distances in millimeters
    func measureContinuously(scanInterval: TimeInterval, block: @escaping (Data) -> Void) {
        
        continuousMeasurement = ContinuousMeasurement(scanInterval: scanInterval, block: block)
    }
    
    func stopMeasuring() {
        
        continuousMeasurement = nil
    }
}
